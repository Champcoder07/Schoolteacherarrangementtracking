import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle, CardFooter, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { 
  CheckCircle2, AlertCircle, UserCircle, BookOpen, Clock, Calendar, 
  LogOut, Bell, School, PlusCircle, ClipboardList, Building2
} from 'lucide-react';
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

// Mock user database
const USERS = {
  admin: { username: 'admin', password: 'admin123', type: 'admin', name: 'Admin User' },
  teacher: { username: 'teacher', password: 'teacher123', type: 'teacher', name: 'John Doe' }
teacher: { username: 'NEERU', password: 'NEERU123', type: 'teacher', name: 'NEERU' }
teacher: { username: 'HEMANT', password: 'HEMANT123', type: 'teacher', name: 'HEMANT' }


};

// Mock subjects
const SUBJECTS = [
  "Mathematics", "English Literature", "Physics", "Chemistry", 
  "Biology", "History", "Geography", "Computer Science"
];

// Mock teachers
const TEACHERS = [
  "John Doe", "NEERU", "HEMANT", "SARIKA", "Michael Wilson"
];

// Mock rooms
const ROOMS = [
  "Room 101", "Room 102", "Room 203", "Lab 1", "Lab 2", "Auditorium", "Library"
];

export default function TeacherArrangementApp() {
  const [user, setUser] = useState(null);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [loginError, setLoginError] = useState('');
  const [currentTab, setCurrentTab] = useState('arrangements');
  const [arrangements, setArrangements] = useState([
    {
      id: '1',
      teacher: 'NEERU',
      subject: 'Mathematics',
      date: '2024-04-13',
      time: '10:00 AM',
      room: 'Room 101',
      attended: false
    },
    {
      id: '2',
      teacher: 'HEMANT',
      subject: 'English Literature',
      date: '2024-04-13',
      time: '1:00 PM',
      room: 'Room 203',
      attended: true
    },
    {
      id: '3',
      teacher: 'John Doe',
      subject: 'Physics',
      date: '2024-04-14',
      time: '11:30 AM',
      room: 'Lab 1',
      attended: false
    }
  ]);
  const [notifications, setNotifications] = useState([
    'Teacher Jane Smith attended class: English Literature',
    'New arrangement added for Robert Johnson: Chemistry'
  ]);
  
  const [newArrangement, setNewArrangement] = useState({
    teacher: '',
    subject: '',
    date: '',
    time: '',
    room: ''
  });
  
  const [filter, setFilter] = useState({
    status: 'all',
    date: ''
  });

  const handleLogin = () => {
    const foundUser = Object.values(USERS).find(
      u => u.username === username && u.password === password
    );

    if (foundUser) {
      setUser({
        username: foundUser.username,
        type: foundUser.type,
        name: foundUser.name
      });
      setUsername('');
      setPassword('');
      setLoginError('');
    } else {
      setLoginError('Invalid credentials');
    }
  };

  const handleLogout = () => {
    setUser(null);
  };

  const markClassAttended = (arrangementId) => {
    const updatedArrangements = arrangements.map(arr => 
      arr.id === arrangementId 
        ? { ...arr, attended: true } 
        : arr
    );

    setArrangements(updatedArrangements);

    const attendedArrangement = updatedArrangements.find(arr => arr.id === arrangementId);
    if (attendedArrangement) {
      const adminNotification = `Teacher ${attendedArrangement.teacher} attended class: ${attendedArrangement.subject}`;
      setNotifications(prev => [...prev, adminNotification]);
    }
  };

  const addNewArrangement = () => {
    if (!newArrangement.teacher || !newArrangement.subject || !newArrangement.date || !newArrangement.time || !newArrangement.room) {
      return; // Don't add if any field is empty
    }
    
    const newId = (arrangements.length + 1).toString();
    const arrangement = {
      ...newArrangement,
      id: newId,
      attended: false
    };
    
    setArrangements([...arrangements, arrangement]);
    setNotifications([...notifications, `New arrangement added for ${newArrangement.teacher}: ${newArrangement.subject}`]);
    
    setNewArrangement({
      teacher: '',
      subject: '',
      date: '',
      time: '',
      room: ''
    });
    
    // Switch to arrangements tab to see the new entry
    setCurrentTab('arrangements');
  };
  
  const filteredArrangements = arrangements.filter(arr => {
    // Filter by status
    if (filter.status === 'attended' && !arr.attended) return false;
    if (filter.status === 'pending' && arr.attended) return false;
    
    // Filter by date
    if (filter.date && arr.date !== filter.date) return false;
    
    return true;
  });
  
  const teacherArrangements = arrangements.filter(arr => 
    user?.type === 'teacher' && arr.teacher === user.name
  );

  const renderLoginForm = () => (
    <div className="flex flex-col items-center justify-center min-h-screen bg-slate-100">
      <div className="text-center mb-8">
        <div className="flex items-center justify-center mb-4">
          <School className="h-10 w-10 text-blue-600" />
        </div>
        <h1 className="text-2xl font-bold text-slate-800">School Management System</h1>
        <p className="text-slate-500">Teacher Arrangement Portal</p>
      </div>
      
      <Card className="w-96 shadow-xl">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl text-center">Login</CardTitle>
          <CardDescription className="text-center">
            Enter your credentials to access the system
          </CardDescription>
        </CardHeader>
        <CardContent className="p-6">
          <div className="grid w-full gap-4">
            <div className="grid gap-2">
              <Label htmlFor="username">Username</Label>
              <Input 
                id="username"
                placeholder="Enter your username" 
                value={username}
                onChange={(e) => setUsername(e.target.value)}
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="password">Password</Label>
              <Input 
                id="password"
                type="password" 
                placeholder="Enter your password" 
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                onKeyPress={(e) => {
                  if (e.key === 'Enter') {
                    handleLogin();
                  }
                }}
              />
            </div>
            <Button 
              onClick={handleLogin}
              className="mt-2"
            >
              Login
            </Button>
            {loginError && (
              <Alert variant="destructive" className="mt-2">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{loginError}</AlertDescription>
              </Alert>
            )}
          </div>
        </CardContent>
        <CardFooter className="bg-slate-50 text-center text-xs text-slate-500 p-4">
          <div className="w-full">
            <p className="font-medium mb-1">Demo credentials:</p>
            <div className="grid grid-cols-2 gap-2">
              <div className="bg-white p-2 rounded border border-slate-200">
                <p className="font-medium">Admin</p>
                <p>admin / admin123</p>
              </div>
              <div className="bg-white p-2 rounded border border-slate-200">
                <p className="font-medium">Teacher</p>
                <p>teacher / teacher123</p>
              </div>
            </div>
          </div>
        </CardFooter>
      </Card>
    </div>
  );

  const renderDashboard = () => (
    <div className="min-h-screen bg-slate-50">
      <header className="bg-white shadow-sm border-b border-slate-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16 items-center">
            <div className="flex items-center">
              <School className="h-8 w-8 text-blue-600 mr-3" />
              <h1 className="text-xl font-bold text-slate-800">
                School Management System
              </h1>
            </div>
            <div className="flex items-center space-x-4">
              <div className="hidden md:flex items-center space-x-1">
                <span className="text-sm text-slate-500">Welcome,</span>
                <span className="text-sm font-medium">{user?.name}</span>
              </div>
              <Badge className="bg-blue-100 text-blue-800 hidden md:flex">
                <UserCircle className="h-3.5 w-3.5 mr-1" />
                {user?.type === 'admin' ? 'Administrator' : 'Teacher'}
              </Badge>
              <Button variant="ghost" onClick={handleLogout} size="sm" className="text-slate-600">
                <LogOut className="h-4 w-4 mr-1" />
                <span className="hidden sm:inline">Logout</span>
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {user?.type === 'admin' ? (
          <div className="flex flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2 mb-6">
            <Card className="w-full sm:w-1/3">
              <CardContent className="p-4 flex items-center space-x-4">
                <div className="bg-blue-100 p-3 rounded-full">
                  <ClipboardList className="h-6 w-6 text-blue-600" />
                </div>
                <div>
                  <p className="text-sm text-slate-500">Total Arrangements</p>
                  <p className="text-2xl font-bold">{arrangements.length}</p>
                </div>
              </CardContent>
            </Card>
            <Card className="w-full sm:w-1/3">
              <CardContent className="p-4 flex items-center space-x-4">
                <div className="bg-green-100 p-3 rounded-full">
                  <CheckCircle2 className="h-6 w-6 text-green-600" />
                </div>
                <div>
                  <p className="text-sm text-slate-500">Classes Attended</p>
                  <p className="text-2xl font-bold">{arrangements.filter(a => a.attended).length}</p>
                </div>
              </CardContent>
            </Card>
            <Card className="w-full sm:w-1/3">
              <CardContent className="p-4 flex items-center space-x-4">
                <div className="bg-yellow-100 p-3 rounded-full">
                  <Bell className="h-6 w-6 text-yellow-600" />
                </div>
                <div>
                  <p className="text-sm text-slate-500">Notifications</p>
                  <p className="text-2xl font-bold">{notifications.length}</p>
                </div>
              </CardContent>
            </Card>
          </div>
        ) : (
          <div className="mb-6">
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center space-x-4">
                  <UserCircle className="h-12 w-12 text-blue-600" />
                  <div>
                    <h2 className="text-xl font-bold">{user?.name}</h2>
                    <p className="text-slate-500">Teacher</p>
                    <div className="mt-1">
                      <Badge className="bg-blue-100 text-blue-800">
                        {teacherArrangements.length} Classes
                      </Badge>
                      <Badge className="ml-2 bg-green-100 text-green-800">
                        {teacherArrangements.filter(a => a.attended).length} Attended
                      </Badge>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        <Tabs defaultValue="arrangements" value={currentTab} onValueChange={setCurrentTab}>
          <TabsList className="mb-4">
            <TabsTrigger value="arrangements">
              <ClipboardList className="h-4 w-4 mr-2" />
              Class Arrangements
            </TabsTrigger>
            {user?.type === 'admin' && (
              <>
                <TabsTrigger value="notifications">
                  <Bell className="h-4 w-4 mr-2" />
                  Notifications
                </TabsTrigger>
                <TabsTrigger value="add">
                  <PlusCircle className="h-4 w-4 mr-2" />
                  Add Arrangement
                </TabsTrigger>
              </>
            )}
          </TabsList>

          <TabsContent value="arrangements">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle>Class Arrangements</CardTitle>
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0 mt-4">
                  <div className="flex items-center">
                    <span className="text-sm mr-2">Status:</span>
                    <Select 
                      value={filter.status} 
                      onValueChange={(value) => setFilter({...filter, status: value})}
                    >
                      <SelectTrigger className="w-32">
                        <SelectValue placeholder="Filter status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All</SelectItem>
                        <SelectItem value="attended">Attended</SelectItem>
                        <SelectItem value="pending">Pending</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="flex items-center">
                    <span className="text-sm mr-2">Date:</span>
                    <Input
                      type="date"
                      className="w-auto"
                      value={filter.date}
                      onChange={(e) => setFilter({...filter, date: e.target.value})}
                    />
                    {filter.date && (
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => setFilter({...filter, date: ''})}
                        className="ml-1 h-8 w-8 p-0"
                      >
                        <span className="sr-only">Clear date</span>
                        <AlertCircle className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                {filteredArrangements.length > 0 ? (
                  <div className="grid gap-4">
                    {filteredArrangements.map(arrangement => (
                      <Card key={arrangement.id} className="overflow-hidden">
                        <div className={`h-1 ${arrangement.attended ? "bg-green-500" : "bg-yellow-500"}`} />
                        <CardContent className="p-4">
                          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                            <div className="space-y-2">
                              <div className="flex items-center">
                                <BookOpen className="h-4 w-4 mr-2 text-blue-600" />
                                <span className="font-medium text-lg">{arrangement.subject}</span>
                                <Badge className="ml-3 text-xs" variant={arrangement.attended ? "outline" : "secondary"}>
                                  {arrangement.attended ? 
                                    <><CheckCircle2 className="h-3 w-3 mr-1" /> Attended</> : 
                                    'Pending'}
                                </Badge>
                              </div>
                              <div className="flex items-center">
                                <UserCircle className="h-4 w-4 mr-2 text-slate-600" />
                                <span className="text-slate-700">{arrangement.teacher}</span>
                              </div>
                              <div className="flex flex-wrap items-center gap-x-4 gap-y-1">
                                <div className="flex items-center">
                                  <Calendar className="h-4 w-4 mr-2 text-slate-600" />
                                  <span className="text-slate-700">{arrangement.date}</span>
                                </div>
                                <div className="flex items-center">
                                  <Clock className="h-4 w-4 mr-2 text-slate-600" />
                                  <span className="text-slate-700">{arrangement.time}</span>
                                </div>
                                <div className="flex items-center">
                                  <Building2 className="h-4 w-4 mr-2 text-slate-600" />
                                  <span className="text-slate-700">{arrangement.room}</span>
                                </div>
                              </div>
                            </div>
                            {(user?.type === 'teacher' && arrangement.teacher === user.name && !arrangement.attended) && (
                              <Button 
                                onClick={() => markClassAttended(arrangement.id)}
                                size="sm"
                                className="mt-4 sm:mt-0"
                              >
                                <CheckCircle2 className="h-4 w-4 mr-2" />
                                Mark Attended
                              </Button>
                            )}
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-12">
                    <ClipboardList className="h-12 w-12 mx-auto text-slate-300" />
                    <h3 className="mt-2 text-lg font-medium text-slate-900">No arrangements found</h3>
                    <p className="mt-1 text-slate-500">Try changing your filters or check back later.</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {user?.type === 'admin' && (
            <TabsContent value="notifications">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Bell className="h-5 w-5 mr-2" />
                    System Notifications
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {notifications.length > 0 ? (
                    <div className="space-y-2">
                      {notifications.map((note, index) => (
                        <Alert key={index} className="bg-blue-50 border-blue-100">
                          <div className="flex gap-2">
                            <CheckCircle2 className="h-4 w-4 text-blue-600 mt-0.5" />
                            <div>
                              <AlertDescription>{note}</AlertDescription>
                              <p className="text-xs text-slate-500 mt-1">
                                {new Date().toLocaleDateString()} Â· {new Date().toLocaleTimeString()}
                              </p>
                            </div>
                          </div>
                        </Alert>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-12">
                      <Bell className="h-12 w-12 mx-auto text-slate-300" />
                      <h3 className="mt-2 text-lg font-medium text-slate-900">No notifications</h3>
                      <p className="mt-1 text-slate-500">Notifications will appear here when there's activity.</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          )}

          {user?.type === 'admin' && (
            <TabsContent value="add">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <PlusCircle className="h-5 w-5 mr-2" />
                    Add New Class Arrangement
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-4">
                    <div className="grid gap-2">
                      <Label htmlFor="teacher">Teacher</Label>
                      <Select 
                        value={newArrangement.teacher} 
                        onValueChange={(value) => setNewArrangement({...newArrangement, teacher: value})}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select a teacher" />
                        </SelectTrigger>
                        <SelectContent>
                          {TEACHERS.map(teacher => (
                            <SelectItem key={teacher} value={teacher}>{teacher}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div className="grid gap-2">
                      <Label htmlFor="subject">Subject</Label>
                      <Select 
                        value={newArrangement.subject} 
                        onValueChange={(value) => setNewArrangement({...newArrangement, subject: value})}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select a subject" />
                        </SelectTrigger>
                        <SelectContent>
                          {SUBJECTS.map(subject => (
                            <SelectItem key={subject} value={subject}>{subject}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="grid gap-2">
                        <Label htmlFor="date">Date</Label>
                        <Input 
                          id="date"
                          type="date"
                          value={newArrangement.date}
                          onChange={(e) => setNewArrangement({...newArrangement, date: e.target.value})}
                        />
                      </div>
                      <div className="grid gap-2">
                        <Label htmlFor="time">Time</Label>
                        <Input 
                          id="time"
                          type="time"
                          value={newArrangement.time}
                          onChange={(e) => {
                            // Convert 24h time to AM/PM format
                            const timeValue = e.target.value;
                            if (timeValue) {
                              const [hours, minutes] = timeValue.split(':');
                              const h = parseInt(hours, 10);
                              const period = h >= 12 ? 'PM' : 'AM';
                              const formattedHours = h % 12 || 12;
                              const formattedTime = `${formattedHours}:${minutes} ${period}`;
                              setNewArrangement({...newArrangement, time: formattedTime});
                            }
                          }}
                        />
                      </div>
                    </div>
                    
                    <div className="grid gap-2">
                      <Label htmlFor="room">Room</Label>
                      <Select 
                        value={newArrangement.room} 
                        onValueChange={(value) => setNewArrangement({...newArrangement, room: value})}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select a room" />
                        </SelectTrigger>
                        <SelectContent>
                          {ROOMS.map(room => (
                            <SelectItem key={room} value={room}>{room}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <Button 
                      onClick={addNewArrangement} 
                      className="mt-4"
                      disabled={!newArrangement.teacher || !newArrangement.subject || !newArrangement.date || !newArrangement.time || !newArrangement.room}
                    >
                      <PlusCircle className="h-4 w-4 mr-2" />
                      Add Class Arrangement
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          )}
        </Tabs>
      </div>
    </div>
  );

  return (
    <div>
      {!user ? renderLoginForm() : renderDashboard()}
    </div>
  );
}
